2023-02-06 15:07:57,833 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: win32
Python: 3.8.10 (tags/v3.8.10:3d8993a, May  3 2021, 11:48:03) [MSC v.1928 64 bit (AMD64)]
CUDA available: True
GPU 0: NVIDIA GeForce GTX 1050
CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2
NVCC: Cuda compilation tools, release 10.2, V10.2.8
MSVC: 用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.34.31937 版
GCC: n/a
PyTorch: 1.10.0+cu102
PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192829337
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.5
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=C:/w/b/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/w/b/windows/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, 

TorchVision: 0.11.0+cu102
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: MSVC 192829924
MMCV CUDA Compiler: 10.2
MMClassification: 0.25.0+3d4f80d
------------------------------------------------------------

2023-02-06 15:07:57,833 - mmcls - INFO - Distributed training: False
2023-02-06 15:07:57,994 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=18,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=512,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, )))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='ImageNet',
        data_prefix='',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        ann_file='data/train.txt',
        classes='data/classes.txt'),
    val=dict(
        type='ImageNet',
        data_prefix='',
        ann_file='data/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes='data/classes.txt'),
    test=dict(
        type='ImageNet',
        data_prefix='data/imagenet/val',
        ann_file='data/imagenet/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(
    interval=1, metric='accuracy', metric_options=dict(topk=(1, )))
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'checkpoints/resnet18_batch256_imagenet_20200708-34ab8f90.pth'
resume_from = None
workflow = [('train', 1)]
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[1])
runner = dict(type='EpochBasedRunner', max_epochs=100)
work_dir = 'work/resnet18_b32_flower'
gpu_ids = [0]

2023-02-06 15:07:57,995 - mmcls - INFO - Set random seed to 1974395880, deterministic: False
2023-02-06 15:07:58,083 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-06 15:07:58,196 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([128, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([256, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 512]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-06 15:07:58,785 - mmcls - INFO - load checkpoint from local path: checkpoints/resnet18_batch256_imagenet_20200708-34ab8f90.pth
2023-02-06 15:07:58,833 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 512]) from checkpoint, the shape in current model is torch.Size([5, 512]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-06 15:07:58,840 - mmcls - INFO - Start running, host: 17219@Krab, work_dir: D:\MMlab\mmclassification\work\resnet18_b32_flower
2023-02-06 15:07:58,841 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-06 15:07:58,842 - mmcls - INFO - workflow: [('train', 1)], max: 100 epochs
2023-02-06 15:07:58,842 - mmcls - INFO - Checkpoints will be saved to D:\MMlab\mmclassification\work\resnet18_b32_flower by HardDiskBackend.
2023-02-06 15:08:30,307 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-06 15:08:38,269 - mmcls - INFO - Epoch(val) [1][18]	accuracy_top-1: 91.7832
2023-02-06 15:08:58,733 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-06 15:09:00,991 - mmcls - INFO - Epoch(val) [2][18]	accuracy_top-1: 90.9091
2023-02-06 15:09:21,607 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-06 15:09:23,834 - mmcls - INFO - Epoch(val) [3][18]	accuracy_top-1: 92.4825
2023-02-06 15:09:44,430 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-06 15:09:46,602 - mmcls - INFO - Epoch(val) [4][18]	accuracy_top-1: 92.3077
2023-02-06 15:10:07,302 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-06 15:10:09,380 - mmcls - INFO - Epoch(val) [5][18]	accuracy_top-1: 93.3566
2023-02-06 15:10:30,021 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-06 15:10:32,354 - mmcls - INFO - Epoch(val) [6][18]	accuracy_top-1: 93.3566
2023-02-06 15:10:53,176 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-06 15:10:56,280 - mmcls - INFO - Epoch(val) [7][18]	accuracy_top-1: 92.4825
2023-02-06 15:11:17,406 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-06 15:11:20,101 - mmcls - INFO - Epoch(val) [8][18]	accuracy_top-1: 94.4056
2023-02-06 15:11:40,840 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-06 15:11:43,015 - mmcls - INFO - Epoch(val) [9][18]	accuracy_top-1: 92.6573
2023-02-06 15:12:03,876 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-06 15:12:06,020 - mmcls - INFO - Epoch(val) [10][18]	accuracy_top-1: 93.1818
2023-02-06 15:12:26,669 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-06 15:12:29,322 - mmcls - INFO - Epoch(val) [11][18]	accuracy_top-1: 93.7063
2023-02-06 15:12:49,997 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-06 15:12:52,161 - mmcls - INFO - Epoch(val) [12][18]	accuracy_top-1: 93.7063
2023-02-06 15:13:12,809 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-06 15:13:15,146 - mmcls - INFO - Epoch(val) [13][18]	accuracy_top-1: 93.5315
2023-02-06 15:13:35,827 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-06 15:13:37,930 - mmcls - INFO - Epoch(val) [14][18]	accuracy_top-1: 93.1818
2023-02-06 15:13:58,608 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-06 15:14:01,017 - mmcls - INFO - Epoch(val) [15][18]	accuracy_top-1: 93.7063
2023-02-06 15:14:21,744 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-06 15:14:23,956 - mmcls - INFO - Epoch(val) [16][18]	accuracy_top-1: 93.3566
2023-02-06 15:14:44,632 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-06 15:14:46,770 - mmcls - INFO - Epoch(val) [17][18]	accuracy_top-1: 93.7063
2023-02-06 15:15:07,431 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-06 15:15:09,603 - mmcls - INFO - Epoch(val) [18][18]	accuracy_top-1: 93.0070
2023-02-06 15:15:30,329 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-06 15:15:32,582 - mmcls - INFO - Epoch(val) [19][18]	accuracy_top-1: 93.5315
2023-02-06 15:15:53,217 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-06 15:15:55,326 - mmcls - INFO - Epoch(val) [20][18]	accuracy_top-1: 93.3566
2023-02-06 15:16:16,058 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-06 15:16:18,334 - mmcls - INFO - Epoch(val) [21][18]	accuracy_top-1: 93.3566
2023-02-06 15:16:39,073 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-06 15:16:41,173 - mmcls - INFO - Epoch(val) [22][18]	accuracy_top-1: 93.7063
2023-02-06 15:17:01,948 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-06 15:17:04,239 - mmcls - INFO - Epoch(val) [23][18]	accuracy_top-1: 93.8811
2023-02-06 15:17:25,000 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-06 15:17:27,554 - mmcls - INFO - Epoch(val) [24][18]	accuracy_top-1: 94.0559
2023-02-06 15:17:48,197 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-06 15:17:50,255 - mmcls - INFO - Epoch(val) [25][18]	accuracy_top-1: 93.7063
2023-02-06 15:18:10,947 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-06 15:18:13,092 - mmcls - INFO - Epoch(val) [26][18]	accuracy_top-1: 93.8811
2023-02-06 15:18:33,786 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-06 15:18:35,862 - mmcls - INFO - Epoch(val) [27][18]	accuracy_top-1: 93.7063
2023-02-06 15:18:56,539 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-06 15:18:58,681 - mmcls - INFO - Epoch(val) [28][18]	accuracy_top-1: 93.8811
2023-02-06 15:19:19,377 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-06 15:19:21,538 - mmcls - INFO - Epoch(val) [29][18]	accuracy_top-1: 94.0559
2023-02-06 15:19:42,373 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-06 15:19:45,064 - mmcls - INFO - Epoch(val) [30][18]	accuracy_top-1: 93.8811
2023-02-06 15:20:05,942 - mmcls - INFO - Saving checkpoint at 31 epochs
2023-02-06 15:20:08,230 - mmcls - INFO - Epoch(val) [31][18]	accuracy_top-1: 93.8811
2023-02-06 15:20:29,080 - mmcls - INFO - Saving checkpoint at 32 epochs
2023-02-06 15:20:31,613 - mmcls - INFO - Epoch(val) [32][18]	accuracy_top-1: 93.1818
2023-02-06 15:20:52,426 - mmcls - INFO - Saving checkpoint at 33 epochs
2023-02-06 15:20:55,165 - mmcls - INFO - Epoch(val) [33][18]	accuracy_top-1: 93.7063
2023-02-06 15:21:15,980 - mmcls - INFO - Saving checkpoint at 34 epochs
2023-02-06 15:21:18,198 - mmcls - INFO - Epoch(val) [34][18]	accuracy_top-1: 93.1818
2023-02-06 15:21:38,998 - mmcls - INFO - Saving checkpoint at 35 epochs
2023-02-06 15:21:41,909 - mmcls - INFO - Epoch(val) [35][18]	accuracy_top-1: 93.8811
2023-02-06 15:22:02,633 - mmcls - INFO - Saving checkpoint at 36 epochs
2023-02-06 15:22:05,011 - mmcls - INFO - Epoch(val) [36][18]	accuracy_top-1: 94.2308
2023-02-06 15:22:25,807 - mmcls - INFO - Saving checkpoint at 37 epochs
2023-02-06 15:22:28,245 - mmcls - INFO - Epoch(val) [37][18]	accuracy_top-1: 94.0559
2023-02-06 15:22:49,121 - mmcls - INFO - Saving checkpoint at 38 epochs
2023-02-06 15:22:51,463 - mmcls - INFO - Epoch(val) [38][18]	accuracy_top-1: 93.7063
2023-02-06 15:23:12,129 - mmcls - INFO - Saving checkpoint at 39 epochs
2023-02-06 15:23:14,593 - mmcls - INFO - Epoch(val) [39][18]	accuracy_top-1: 94.0559
2023-02-06 15:23:35,423 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-06 15:23:37,750 - mmcls - INFO - Epoch(val) [40][18]	accuracy_top-1: 93.5315
2023-02-06 15:23:58,488 - mmcls - INFO - Saving checkpoint at 41 epochs
2023-02-06 15:24:00,631 - mmcls - INFO - Epoch(val) [41][18]	accuracy_top-1: 94.0559
2023-02-06 15:24:21,622 - mmcls - INFO - Saving checkpoint at 42 epochs
2023-02-06 15:24:24,360 - mmcls - INFO - Epoch(val) [42][18]	accuracy_top-1: 94.2308
2023-02-06 15:24:45,047 - mmcls - INFO - Saving checkpoint at 43 epochs
2023-02-06 15:24:47,149 - mmcls - INFO - Epoch(val) [43][18]	accuracy_top-1: 93.8811
2023-02-06 15:25:07,822 - mmcls - INFO - Saving checkpoint at 44 epochs
2023-02-06 15:25:09,889 - mmcls - INFO - Epoch(val) [44][18]	accuracy_top-1: 94.4056
2023-02-06 15:25:30,508 - mmcls - INFO - Saving checkpoint at 45 epochs
2023-02-06 15:25:32,551 - mmcls - INFO - Epoch(val) [45][18]	accuracy_top-1: 93.7063
2023-02-06 15:25:53,228 - mmcls - INFO - Saving checkpoint at 46 epochs
2023-02-06 15:25:55,403 - mmcls - INFO - Epoch(val) [46][18]	accuracy_top-1: 94.0559
2023-02-06 15:26:16,131 - mmcls - INFO - Saving checkpoint at 47 epochs
2023-02-06 15:26:18,234 - mmcls - INFO - Epoch(val) [47][18]	accuracy_top-1: 94.2308
2023-02-06 15:26:38,916 - mmcls - INFO - Saving checkpoint at 48 epochs
2023-02-06 15:26:41,102 - mmcls - INFO - Epoch(val) [48][18]	accuracy_top-1: 94.5804
2023-02-06 15:27:01,837 - mmcls - INFO - Saving checkpoint at 49 epochs
2023-02-06 15:27:03,920 - mmcls - INFO - Epoch(val) [49][18]	accuracy_top-1: 94.5804
2023-02-06 15:27:24,671 - mmcls - INFO - Saving checkpoint at 50 epochs
2023-02-06 15:27:26,937 - mmcls - INFO - Epoch(val) [50][18]	accuracy_top-1: 94.0559
2023-02-06 15:27:47,690 - mmcls - INFO - Saving checkpoint at 51 epochs
2023-02-06 15:27:49,954 - mmcls - INFO - Epoch(val) [51][18]	accuracy_top-1: 94.0559
2023-02-06 15:28:10,665 - mmcls - INFO - Saving checkpoint at 52 epochs
2023-02-06 15:28:12,839 - mmcls - INFO - Epoch(val) [52][18]	accuracy_top-1: 94.2308
2023-02-06 15:28:33,501 - mmcls - INFO - Saving checkpoint at 53 epochs
2023-02-06 15:28:35,604 - mmcls - INFO - Epoch(val) [53][18]	accuracy_top-1: 94.5804
2023-02-06 15:28:56,253 - mmcls - INFO - Saving checkpoint at 54 epochs
2023-02-06 15:28:58,438 - mmcls - INFO - Epoch(val) [54][18]	accuracy_top-1: 94.0559
2023-02-06 15:29:19,148 - mmcls - INFO - Saving checkpoint at 55 epochs
2023-02-06 15:29:21,310 - mmcls - INFO - Epoch(val) [55][18]	accuracy_top-1: 94.2308
2023-02-06 15:29:41,975 - mmcls - INFO - Saving checkpoint at 56 epochs
2023-02-06 15:29:44,337 - mmcls - INFO - Epoch(val) [56][18]	accuracy_top-1: 93.8811
2023-02-06 15:30:05,072 - mmcls - INFO - Saving checkpoint at 57 epochs
2023-02-06 15:30:07,222 - mmcls - INFO - Epoch(val) [57][18]	accuracy_top-1: 93.8811
2023-02-06 15:30:27,919 - mmcls - INFO - Saving checkpoint at 58 epochs
2023-02-06 15:30:29,978 - mmcls - INFO - Epoch(val) [58][18]	accuracy_top-1: 94.4056
2023-02-06 15:30:50,679 - mmcls - INFO - Saving checkpoint at 59 epochs
2023-02-06 15:30:52,820 - mmcls - INFO - Epoch(val) [59][18]	accuracy_top-1: 94.0559
2023-02-06 15:31:13,490 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-06 15:31:15,634 - mmcls - INFO - Epoch(val) [60][18]	accuracy_top-1: 94.5804
2023-02-06 15:31:36,333 - mmcls - INFO - Saving checkpoint at 61 epochs
2023-02-06 15:31:38,607 - mmcls - INFO - Epoch(val) [61][18]	accuracy_top-1: 94.2308
2023-02-06 15:31:59,333 - mmcls - INFO - Saving checkpoint at 62 epochs
2023-02-06 15:32:01,366 - mmcls - INFO - Epoch(val) [62][18]	accuracy_top-1: 94.0559
2023-02-06 15:32:22,082 - mmcls - INFO - Saving checkpoint at 63 epochs
2023-02-06 15:32:24,311 - mmcls - INFO - Epoch(val) [63][18]	accuracy_top-1: 94.0559
2023-02-06 15:32:45,041 - mmcls - INFO - Saving checkpoint at 64 epochs
2023-02-06 15:32:47,575 - mmcls - INFO - Epoch(val) [64][18]	accuracy_top-1: 93.8811
2023-02-06 15:33:08,254 - mmcls - INFO - Saving checkpoint at 65 epochs
2023-02-06 15:33:10,414 - mmcls - INFO - Epoch(val) [65][18]	accuracy_top-1: 94.2308
2023-02-06 15:33:31,191 - mmcls - INFO - Saving checkpoint at 66 epochs
2023-02-06 15:33:33,531 - mmcls - INFO - Epoch(val) [66][18]	accuracy_top-1: 93.7063
2023-02-06 15:33:54,402 - mmcls - INFO - Saving checkpoint at 67 epochs
2023-02-06 15:33:56,817 - mmcls - INFO - Epoch(val) [67][18]	accuracy_top-1: 93.7063
2023-02-06 15:34:17,563 - mmcls - INFO - Saving checkpoint at 68 epochs
2023-02-06 15:34:19,814 - mmcls - INFO - Epoch(val) [68][18]	accuracy_top-1: 94.4056
2023-02-06 15:34:40,607 - mmcls - INFO - Saving checkpoint at 69 epochs
2023-02-06 15:34:42,703 - mmcls - INFO - Epoch(val) [69][18]	accuracy_top-1: 93.8811
2023-02-06 15:35:03,463 - mmcls - INFO - Saving checkpoint at 70 epochs
2023-02-06 15:35:05,559 - mmcls - INFO - Epoch(val) [70][18]	accuracy_top-1: 94.5804
2023-02-06 15:35:26,292 - mmcls - INFO - Saving checkpoint at 71 epochs
2023-02-06 15:35:28,561 - mmcls - INFO - Epoch(val) [71][18]	accuracy_top-1: 93.8811
2023-02-06 15:35:49,309 - mmcls - INFO - Saving checkpoint at 72 epochs
2023-02-06 15:35:51,588 - mmcls - INFO - Epoch(val) [72][18]	accuracy_top-1: 94.4056
2023-02-06 15:36:12,313 - mmcls - INFO - Saving checkpoint at 73 epochs
2023-02-06 15:36:14,487 - mmcls - INFO - Epoch(val) [73][18]	accuracy_top-1: 94.0559
2023-02-06 15:36:35,271 - mmcls - INFO - Saving checkpoint at 74 epochs
2023-02-06 15:36:37,470 - mmcls - INFO - Epoch(val) [74][18]	accuracy_top-1: 93.8811
2023-02-06 15:36:58,225 - mmcls - INFO - Saving checkpoint at 75 epochs
2023-02-06 15:37:00,415 - mmcls - INFO - Epoch(val) [75][18]	accuracy_top-1: 94.0559
2023-02-06 15:37:21,129 - mmcls - INFO - Saving checkpoint at 76 epochs
2023-02-06 15:37:23,222 - mmcls - INFO - Epoch(val) [76][18]	accuracy_top-1: 94.9301
2023-02-06 15:37:43,947 - mmcls - INFO - Saving checkpoint at 77 epochs
2023-02-06 15:37:46,787 - mmcls - INFO - Epoch(val) [77][18]	accuracy_top-1: 94.0559
2023-02-06 15:38:07,482 - mmcls - INFO - Saving checkpoint at 78 epochs
2023-02-06 15:38:09,611 - mmcls - INFO - Epoch(val) [78][18]	accuracy_top-1: 94.2308
2023-02-06 15:38:30,363 - mmcls - INFO - Saving checkpoint at 79 epochs
2023-02-06 15:38:32,444 - mmcls - INFO - Epoch(val) [79][18]	accuracy_top-1: 94.5804
2023-02-06 15:38:53,236 - mmcls - INFO - Saving checkpoint at 80 epochs
2023-02-06 15:38:55,736 - mmcls - INFO - Epoch(val) [80][18]	accuracy_top-1: 93.7063
2023-02-06 15:39:16,529 - mmcls - INFO - Saving checkpoint at 81 epochs
2023-02-06 15:39:19,027 - mmcls - INFO - Epoch(val) [81][18]	accuracy_top-1: 93.8811
2023-02-06 15:39:39,736 - mmcls - INFO - Saving checkpoint at 82 epochs
2023-02-06 15:39:42,210 - mmcls - INFO - Epoch(val) [82][18]	accuracy_top-1: 94.0559
2023-02-06 15:40:02,930 - mmcls - INFO - Saving checkpoint at 83 epochs
